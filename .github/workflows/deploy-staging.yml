name: Deploy to Staging

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_ID: 'mashub-staging-a0725'
  ENVIRONMENT: 'staging'

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify CI passed
        run: |
          echo "Verifying that all CI checks passed..."
          # This will be checked by branch protection rules

      - name: Check for database migrations
        run: |
          echo "Checking for pending database migrations..."
          # Add logic to check for migration files

  deploy-with-blue-green:
    runs-on: ubuntu-latest
    environment: staging
    needs: pre-deployment-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          REACT_APP_FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY_STAGING }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN_STAGING }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET_STAGING }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID_STAGING }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID_STAGING }}
          REACT_APP_STRIPE_PUBLIC_KEY: ${{ secrets.STRIPE_PUBLIC_KEY_STAGING }}
          REACT_APP_PAYMOB_PUBLIC_KEY: ${{ secrets.PAYMOB_PUBLIC_KEY_STAGING }}
          REACT_APP_ENVIRONMENT: staging
          REACT_APP_SENTRY_DSN: ${{ secrets.SENTRY_DSN_STAGING }}

      - name: Deploy to preview channel
        id: preview_deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}'
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          expires: 30d

      - name: Store preview URL
        run: |
          echo "PREVIEW_URL=${{ steps.preview_deploy.outputs.details_url }}" >> $GITHUB_ENV

  deploy-functions:
    runs-on: ubuntu-latest
    environment: staging
    needs: deploy-with-blue-green
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci

      - name: Build functions
        run: |
          cd functions
          npm run build

      - name: Set environment variables for functions
        run: |
          npm install -g firebase-tools
          firebase functions:config:set \
            stripe.secret_key="${{ secrets.STRIPE_SECRET_KEY_STAGING }}" \
            paymob.api_key="${{ secrets.PAYMOB_API_KEY_STAGING }}" \
            slack.webhook_url="${{ secrets.SLACK_WEBHOOK_URL_STAGING }}" \
            email.smtp_host="${{ secrets.EMAIL_SMTP_HOST }}" \
            email.smtp_user="${{ secrets.EMAIL_SMTP_USER }}" \
            email.smtp_password="${{ secrets.EMAIL_SMTP_PASSWORD }}" \
            sentry.dsn="${{ secrets.SENTRY_DSN_STAGING }}" \
            --project=${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firebase Functions
        run: |
          firebase deploy --only functions --project=${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  comprehensive-testing:
    runs-on: ubuntu-latest
    needs: deploy-functions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run API integration tests
        run: |
          npm run test:api:staging
        env:
          API_BASE_URL: https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Run E2E tests
        run: |
          npm run test:e2e -- --baseUrl=${{ env.PREVIEW_URL }}
        env:
          CYPRESS_TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          CYPRESS_TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-test-results
          path: |
            cypress/screenshots
            cypress/videos
            test-results/

  security-scan:
    runs-on: ubuntu-latest
    needs: deploy-functions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'https://${{ env.FIREBASE_PROJECT_ID }}.web.app'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Security headers check
        run: |
          curl -I "https://${{ env.FIREBASE_PROJECT_ID }}.web.app" | grep -E "(Strict-Transport-Security|X-Frame-Options|X-Content-Type-Options|Content-Security-Policy)"

  performance-monitoring:
    runs-on: ubuntu-latest
    needs: comprehensive-testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse performance audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://${{ env.FIREBASE_PROJECT_ID }}.web.app
            https://${{ env.FIREBASE_PROJECT_ID }}.web.app/dashboard
            https://${{ env.FIREBASE_PROJECT_ID }}.web.app/projects
          budgetPath: '.lighthouse/budget.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Load testing with Artillery
        run: |
          npm install -g artillery
          artillery quick --count 10 --num 10 "https://${{ env.FIREBASE_PROJECT_ID }}.web.app" > load-test-results.txt
          cat load-test-results.txt

  promote-to-live:
    runs-on: ubuntu-latest
    environment: staging-promotion
    needs: [comprehensive-testing, security-scan, performance-monitoring]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Promote to live channel
        run: |
          firebase hosting:channel:deploy live --project=${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firestore rules and indexes
        run: |
          firebase deploy --only firestore:rules,firestore:indexes,storage --project=${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  post-deployment-verification:
    runs-on: ubuntu-latest
    needs: promote-to-live
    steps:
      - name: Health check
        run: |
          echo "Verifying deployment health..."
          curl -f "https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/api/health" || exit 1
          curl -f "https://${{ env.FIREBASE_PROJECT_ID }}.web.app" || exit 1
          echo "‚úÖ Deployment verified successfully"

      - name: Update deployment status
        run: |
          echo "Updating deployment tracking..."
          curl -X POST "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "environment": "staging",
              "status": "deployed",
              "commit": "${{ github.sha }}",
              "timestamp": "${{ github.event.head_commit.timestamp }}"
            }' || true

  rollback-on-failure:
    runs-on: ubuntu-latest
    if: failure()
    needs: [promote-to-live, post-deployment-verification]
    steps:
      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Rollback deployment
        run: |
          echo "Rolling back deployment due to failure..."
          firebase hosting:channel:deploy live --project=${{ env.FIREBASE_PROJECT_ID }} --last-successful
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  notification:
    runs-on: ubuntu-latest
    if: always()
    needs: [post-deployment-verification, rollback-on-failure]
    steps:
      - name: Notify deployment result
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            üéØ Staging Deployment ${{ job.status == 'success' && 'completed successfully!' || 'failed and was rolled back!' }}

            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            Environment: Staging
            URL: https://${{ env.FIREBASE_PROJECT_ID }}.web.app

            ${{ job.status == 'success' && '‚úÖ Ready for UAT and production promotion!' || '‚ùå Check logs and fix issues before retry.' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}