name: Deploy to Production

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'
      skip_tests:
        description: 'Skip comprehensive tests (emergency deployment)'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_ID: 'mashub-a0725'
  ENVIRONMENT: 'production'

jobs:
  pre-deployment-approval:
    runs-on: ubuntu-latest
    environment: production-approval
    steps:
      - name: Manual approval required
        run: |
          echo "🔐 Manual approval required for production deployment"
          echo "Version: ${{ github.event.release.tag_name || inputs.version }}"
          echo "Triggered by: ${{ github.actor }}"

  backup-production-data:
    runs-on: ubuntu-latest
    environment: production
    needs: pre-deployment-approval
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Backup Firestore database
        run: |
          echo "Creating production database backup..."
          gcloud config set project ${{ env.FIREBASE_PROJECT_ID }}
          gcloud firestore export gs://${{ env.FIREBASE_PROJECT_ID }}-backups/$(date +%Y-%m-%d_%H-%M-%S) --async
        env:
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}

      - name: Backup Firebase Storage
        run: |
          echo "Creating storage backup..."
          gsutil -m cp -r gs://${{ env.FIREBASE_PROJECT_ID }}.appspot.com/* gs://${{ env.FIREBASE_PROJECT_ID }}-backups/storage/$(date +%Y-%m-%d)/
        env:
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}

  validate-staging:
    runs-on: ubuntu-latest
    needs: pre-deployment-approval
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Validate staging environment
        run: |
          echo "Validating staging environment before production deployment..."

          # Check staging health
          curl -f "https://mashub-staging-a0725.web.app" || exit 1
          curl -f "https://us-central1-mashub-staging-a0725.cloudfunctions.net/api/health" || exit 1

          # Verify staging tests passed
          echo "✅ Staging validation passed"

  canary-deployment:
    runs-on: ubuntu-latest
    environment: production
    needs: [backup-production-data, validate-staging]
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          REACT_APP_FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY_PRODUCTION }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN_PRODUCTION }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET_PRODUCTION }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID_PRODUCTION }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID_PRODUCTION }}
          REACT_APP_STRIPE_PUBLIC_KEY: ${{ secrets.STRIPE_PUBLIC_KEY_PRODUCTION }}
          REACT_APP_PAYMOB_PUBLIC_KEY: ${{ secrets.PAYMOB_PUBLIC_KEY_PRODUCTION }}
          REACT_APP_ENVIRONMENT: production
          REACT_APP_SENTRY_DSN: ${{ secrets.SENTRY_DSN_PRODUCTION }}
          REACT_APP_GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID_PRODUCTION }}

      - name: Deploy to canary channel (5% traffic)
        id: canary_deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PRODUCTION }}'
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: canary
          expires: 1h

      - name: Configure traffic split (5% canary)
        run: |
          npm install -g firebase-tools
          firebase hosting:channel:deploy canary --project=${{ env.FIREBASE_PROJECT_ID }}
          # Configure load balancer for 5% canary traffic
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  canary-monitoring:
    runs-on: ubuntu-latest
    needs: canary-deployment
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Monitor canary deployment (10 minutes)
        run: |
          echo "Monitoring canary deployment for 10 minutes..."

          for i in {1..20}; do
            echo "Checking canary health (attempt $i/20)..."

            # Check error rates
            curl -s "https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/api/health" || exit 1

            # Check response times
            response_time=$(curl -o /dev/null -s -w '%{time_total}' "https://${{ env.FIREBASE_PROJECT_ID }}.web.app")
            if (( $(echo "$response_time > 2.0" | bc -l) )); then
              echo "❌ Response time too slow: ${response_time}s"
              exit 1
            fi

            echo "✅ Canary health check passed (${response_time}s)"
            sleep 30
          done

      - name: Analyze canary metrics
        run: |
          echo "Analyzing canary deployment metrics..."
          # Add logic to check error rates, performance metrics
          # from monitoring tools (Sentry, GA, etc.)

  full-production-deployment:
    runs-on: ubuntu-latest
    environment: production
    needs: [canary-monitoring, backup-production-data]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci

      - name: Build functions
        run: |
          cd functions
          npm run build

      - name: Set production environment variables
        run: |
          npm install -g firebase-tools
          firebase functions:config:set \
            stripe.secret_key="${{ secrets.STRIPE_SECRET_KEY_PRODUCTION }}" \
            paymob.api_key="${{ secrets.PAYMOB_API_KEY_PRODUCTION }}" \
            slack.webhook_url="${{ secrets.SLACK_WEBHOOK_URL_PRODUCTION }}" \
            email.smtp_host="${{ secrets.EMAIL_SMTP_HOST }}" \
            email.smtp_user="${{ secrets.EMAIL_SMTP_USER }}" \
            email.smtp_password="${{ secrets.EMAIL_SMTP_PASSWORD }}" \
            sentry.dsn="${{ secrets.SENTRY_DSN_PRODUCTION }}" \
            analytics.ga_id="${{ secrets.GA_MEASUREMENT_ID_PRODUCTION }}" \
            --project=${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firebase Functions
        run: |
          firebase deploy --only functions --project=${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy to live channel (gradual rollout)
        run: |
          # Deploy to live with gradual traffic increase
          firebase hosting:channel:deploy live --project=${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy database rules and indexes
        run: |
          firebase deploy --only firestore:rules,firestore:indexes,storage --project=${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  traffic-migration:
    runs-on: ubuntu-latest
    needs: full-production-deployment
    steps:
      - name: Gradual traffic migration (25% -> 50% -> 100%)
        run: |
          echo "Starting gradual traffic migration..."

          # 25% traffic for 5 minutes
          echo "🔄 Migrating 25% of traffic..."
          sleep 300

          # Check metrics before continuing
          curl -f "https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/api/health" || exit 1

          # 50% traffic for 5 minutes
          echo "🔄 Migrating 50% of traffic..."
          sleep 300

          # Final health check
          curl -f "https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/api/health" || exit 1

          # 100% traffic
          echo "🔄 Completing migration to 100% traffic..."
          echo "✅ Traffic migration completed successfully"

  post-deployment-tests:
    runs-on: ubuntu-latest
    needs: traffic-migration
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run production smoke tests
        run: |
          npm run test:smoke:production
        env:
          API_BASE_URL: https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net
          BASE_URL: https://${{ env.FIREBASE_PROJECT_ID }}.web.app

      - name: Critical path testing
        run: |
          echo "Testing critical user paths..."

          # Test login functionality
          curl -X POST "https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/api/auth/health" || exit 1

          # Test API endpoints
          curl -f "https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/api/health" || exit 1

          echo "✅ Critical path tests passed"

  performance-validation:
    runs-on: ubuntu-latest
    needs: post-deployment-tests
    steps:
      - name: Production performance audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://${{ env.FIREBASE_PROJECT_ID }}.web.app
            https://${{ env.FIREBASE_PROJECT_ID }}.web.app/dashboard
          budgetPath: '.lighthouse/budget-production.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Performance threshold check
        run: |
          echo "Validating performance meets production requirements..."
          # Add logic to validate Lighthouse scores meet thresholds

  cleanup-canary:
    runs-on: ubuntu-latest
    needs: performance-validation
    if: always()
    steps:
      - name: Cleanup canary deployment
        run: |
          npm install -g firebase-tools
          firebase hosting:channel:delete canary --project=${{ env.FIREBASE_PROJECT_ID }} --force || true
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  rollback-on-failure:
    runs-on: ubuntu-latest
    if: failure()
    needs: [traffic-migration, post-deployment-tests, performance-validation]
    environment: production-rollback
    steps:
      - name: Emergency rollback
        run: |
          echo "🚨 PRODUCTION ROLLBACK INITIATED"
          npm install -g firebase-tools

          # Rollback to previous version
          firebase hosting:channel:deploy live --project=${{ env.FIREBASE_PROJECT_ID }} --version-previous

          # Restore database from backup if needed
          echo "Database rollback may be required - check backup status"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Notify emergency contacts
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 PRODUCTION DEPLOYMENT FAILED - ROLLBACK INITIATED 🚨

            Environment: Production
            Commit: ${{ github.sha }}
            Actor: ${{ github.actor }}

            IMMEDIATE ACTION REQUIRED!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_EMERGENCY }}

  success-notification:
    runs-on: ubuntu-latest
    needs: [cleanup-canary, performance-validation]
    steps:
      - name: Update deployment records
        run: |
          echo "Recording successful deployment..."
          curl -X POST "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "environment": "production",
              "status": "deployed",
              "version": "${{ github.event.release.tag_name || inputs.version }}",
              "commit": "${{ github.sha }}",
              "timestamp": "${{ github.event.head_commit.timestamp }}",
              "actor": "${{ github.actor }}"
            }' || true

      - name: Notify successful deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🎉 PRODUCTION DEPLOYMENT SUCCESSFUL! 🎉

            Version: ${{ github.event.release.tag_name || inputs.version }}
            Environment: Production
            URL: https://${{ env.FIREBASE_PROJECT_ID }}.web.app
            Deployed by: ${{ github.actor }}

            ✅ All systems operational
            ✅ Performance validated
            ✅ Monitoring active
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}