name: Deploy to Development

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_ID: 'mashub-dev-a0725'
  ENVIRONMENT: 'development'

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          REACT_APP_FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY_DEVELOPMENT }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN_DEVELOPMENT }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET_DEVELOPMENT }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID_DEVELOPMENT }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID_DEVELOPMENT }}
          REACT_APP_STRIPE_PUBLIC_KEY: ${{ secrets.STRIPE_PUBLIC_KEY_DEVELOPMENT }}
          REACT_APP_PAYMOB_PUBLIC_KEY: ${{ secrets.PAYMOB_PUBLIC_KEY_DEVELOPMENT }}
          REACT_APP_ENVIRONMENT: development

      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_DEVELOPMENT }}'
          projectId: ${{ env.FIREBASE_PROJECT_ID }}
          channelId: live

  deploy-functions:
    runs-on: ubuntu-latest
    environment: development
    needs: deploy-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci

      - name: Build functions
        run: |
          cd functions
          npm run build

      - name: Set environment variables for functions
        run: |
          npm install -g firebase-tools
          firebase functions:config:set \
            stripe.secret_key="${{ secrets.STRIPE_SECRET_KEY_DEVELOPMENT }}" \
            paymob.api_key="${{ secrets.PAYMOB_API_KEY_DEVELOPMENT }}" \
            slack.webhook_url="${{ secrets.SLACK_WEBHOOK_URL_DEVELOPMENT }}" \
            email.smtp_host="${{ secrets.EMAIL_SMTP_HOST }}" \
            email.smtp_user="${{ secrets.EMAIL_SMTP_USER }}" \
            email.smtp_password="${{ secrets.EMAIL_SMTP_PASSWORD }}" \
            --project=${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firebase Functions
        run: |
          firebase deploy --only functions --project=${{ env.FIREBASE_PROJECT_ID }} --force
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  deploy-firestore:
    runs-on: ubuntu-latest
    environment: development
    needs: deploy-functions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy Firestore rules
        run: |
          firebase deploy --only firestore:rules --project=${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Firestore indexes
        run: |
          firebase deploy --only firestore:indexes --project=${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy Storage rules
        run: |
          firebase deploy --only storage --project=${{ env.FIREBASE_PROJECT_ID }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  smoke-tests:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-functions, deploy-firestore]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run smoke tests
        run: |
          npm run test:smoke -- --baseUrl=https://${{ env.FIREBASE_PROJECT_ID }}.web.app
        env:
          TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
          TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

      - name: Health check API endpoints
        run: |
          echo "Testing API endpoints..."
          curl -f "https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/api/health" || exit 1
          echo "‚úÖ API health check passed"

  performance-tests:
    runs-on: ubuntu-latest
    needs: smoke-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://${{ env.FIREBASE_PROJECT_ID }}.web.app
            https://${{ env.FIREBASE_PROJECT_ID }}.web.app/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true

  notification:
    runs-on: ubuntu-latest
    needs: [performance-tests]
    if: always()
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            üöÄ Development Deployment ${{ job.status == 'success' && 'completed successfully!' || 'failed!' }}

            Branch: `${{ github.ref_name }}`
            Commit: `${{ github.sha }}`
            Environment: Development
            URL: https://${{ env.FIREBASE_PROJECT_ID }}.web.app

            ${{ job.status == 'success' && '‚úÖ Ready for testing!' || '‚ùå Please check the logs.' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}