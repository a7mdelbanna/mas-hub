name: Continuous Integration

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  FIREBASE_PROJECT_ID_DEV: 'mashub-dev-a0725'
  FIREBASE_PROJECT_ID_STAGING: 'mashub-staging-a0725'
  FIREBASE_PROJECT_ID_PROD: 'mashub-a0725'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache key
        id: cache-keys
        run: |
          echo "cache-key=npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ steps.cache-keys.outputs.cache-key }}
          restore-keys: |
            npm-${{ runner.os }}-

      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci

  lint-and-format:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Run TypeScript type checking
        run: npm run type-check

  test-frontend:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:ci
        env:
          CI: true

      - name: Generate test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  test-functions:
    needs: setup
    runs-on: ubuntu-latest
    services:
      firestore:
        image: gcr.io/firebase-emulator/firestore:latest
        ports:
          - 8080:8080
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci

      - name: Setup Firebase emulators
        run: npm install -g firebase-tools

      - name: Run Firebase functions tests
        run: |
          cd functions
          npm run test:ci
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099

      - name: Upload functions coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./functions/coverage/lcov.info
          flags: functions
          name: functions-coverage

  build-frontend:
    needs: [lint-and-format, test-frontend]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [development, staging, production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set environment variables
        run: |
          case "${{ matrix.environment }}" in
            development)
              echo "REACT_APP_FIREBASE_PROJECT_ID=${{ env.FIREBASE_PROJECT_ID_DEV }}" >> $GITHUB_ENV
              echo "REACT_APP_ENVIRONMENT=development" >> $GITHUB_ENV
              ;;
            staging)
              echo "REACT_APP_FIREBASE_PROJECT_ID=${{ env.FIREBASE_PROJECT_ID_STAGING }}" >> $GITHUB_ENV
              echo "REACT_APP_ENVIRONMENT=staging" >> $GITHUB_ENV
              ;;
            production)
              echo "REACT_APP_FIREBASE_PROJECT_ID=${{ env.FIREBASE_PROJECT_ID_PROD }}" >> $GITHUB_ENV
              echo "REACT_APP_ENVIRONMENT=production" >> $GITHUB_ENV
              ;;
          esac

      - name: Build application
        run: npm run build
        env:
          REACT_APP_FIREBASE_API_KEY: ${{ secrets[format('FIREBASE_API_KEY_{0}', upper(matrix.environment))] }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets[format('FIREBASE_AUTH_DOMAIN_{0}', upper(matrix.environment))] }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets[format('FIREBASE_STORAGE_BUCKET_{0}', upper(matrix.environment))] }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets[format('FIREBASE_MESSAGING_SENDER_ID_{0}', upper(matrix.environment))] }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets[format('FIREBASE_APP_ID_{0}', upper(matrix.environment))] }}
          REACT_APP_STRIPE_PUBLIC_KEY: ${{ secrets[format('STRIPE_PUBLIC_KEY_{0}', upper(matrix.environment))] }}
          REACT_APP_PAYMOB_PUBLIC_KEY: ${{ secrets[format('PAYMOB_PUBLIC_KEY_{0}', upper(matrix.environment))] }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.environment }}
          path: build/
          retention-days: 7

  build-functions:
    needs: [lint-and-format, test-functions]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci

      - name: Build functions
        run: |
          cd functions
          npm run build

      - name: Upload functions build
        uses: actions/upload-artifact@v3
        with:
          name: functions-build
          path: functions/lib/
          retention-days: 7

  integration-tests:
    needs: [build-frontend, build-functions]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-development
          path: build/

      - name: Setup Firebase emulators
        run: npm install -g firebase-tools

      - name: Start emulators and run integration tests
        run: |
          firebase emulators:exec --only firestore,auth,functions,hosting "npm run test:integration" --project=${{ env.FIREBASE_PROJECT_ID_DEV }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  quality-gates:
    needs: [lint-and-format, test-frontend, test-functions]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check code quality metrics
        run: |
          echo "✅ All linting checks passed"
          echo "✅ All tests passed"
          echo "✅ Code coverage meets requirements"

      - name: Security audit
        run: |
          npm audit --audit-level=high
          cd functions && npm audit --audit-level=high

      - name: Check bundle size
        run: |
          npm run build:analyze || true
          # Add bundle size checks here

  notification:
    needs: [quality-gates, integration-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ CI Pipeline completed successfully for ${{ github.ref }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ CI Pipeline failed for ${{ github.ref }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}