name: MAS Business OS - Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  FIREBASE_PROJECT_ID: mashub-test
  FIREBASE_PROJECT_ID_STAGING: mashub-staging
  FIREBASE_PROJECT_ID_PROD: mashub-a0725

jobs:
  # ==================== UNIT TESTS ====================
  unit-tests-frontend:
    name: 'Frontend Unit Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: apps/web
        run: npm ci

      - name: Run type checking
        working-directory: apps/web
        run: npm run type-check

      - name: Run linting
        working-directory: apps/web
        run: npm run lint

      - name: Run unit tests with coverage
        working-directory: apps/web
        run: npm run test:coverage
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY_TEST }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN_TEST }}
          VITE_FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Upload frontend coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: apps/web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Generate coverage report
        working-directory: apps/web
        run: npm run test:coverage -- --reporter=json-summary --outputFile=coverage-summary.json

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('apps/web/coverage-summary.json', 'utf8'));
            const lines = coverage.total.lines.pct;
            const functions = coverage.total.functions.pct;
            const branches = coverage.total.branches.pct;
            const statements = coverage.total.statements.pct;

            const comment = `## 🧪 Frontend Test Coverage Report

            | Metric | Coverage |
            |--------|----------|
            | Lines | ${lines}% |
            | Functions | ${functions}% |
            | Branches | ${branches}% |
            | Statements | ${statements}% |

            ${lines >= 80 ? '✅' : '❌'} **Coverage Threshold**: 80% minimum required
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  unit-tests-backend:
    name: 'Backend Unit Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      firebase-emulator:
        image: google/cloud-sdk:latest
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Setup Firebase CLI
        run: |
          npm install -g firebase-tools
          firebase --version

      - name: Install backend dependencies
        working-directory: functions
        run: npm ci

      - name: Build backend functions
        working-directory: functions
        run: npm run build

      - name: Start Firebase emulators
        run: |
          firebase emulators:start --project=${{ env.FIREBASE_PROJECT_ID }} &
          # Wait for emulators to be ready
          sleep 30
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Run backend unit tests with coverage
        working-directory: functions
        run: npm run test -- --coverage --ci --watchAll=false
        env:
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Upload backend coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: functions/coverage/lcov.info
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Stop Firebase emulators
        run: firebase emulators:stop

  # ==================== INTEGRATION TESTS ====================
  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [unit-tests-frontend, unit-tests-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Install dependencies
        run: |
          cd apps/web && npm ci
          cd ../.. && cd functions && npm ci

      - name: Build applications
        run: |
          cd apps/web && npm run build
          cd ../.. && cd functions && npm run build

      - name: Start Firebase emulators for integration
        run: |
          firebase emulators:start --project=${{ env.FIREBASE_PROJECT_ID }} &
          sleep 45
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Run integration tests
        working-directory: functions
        run: npm run test:integration
        env:
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          FIRESTORE_EMULATOR_HOST: localhost:8080
          FUNCTIONS_EMULATOR_HOST: localhost:5001
          FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID }}

      - name: Stop Firebase emulators
        run: firebase emulators:stop

  # ==================== E2E TESTS ====================
  e2e-tests:
    name: 'E2E Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests-frontend, unit-tests-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd apps/web && npm ci
          cd ../.. && npm install -g firebase-tools
          npx playwright install --with-deps

      - name: Setup test environment
        run: |
          # Create test environment file
          echo "VITE_FIREBASE_PROJECT_ID=${{ env.FIREBASE_PROJECT_ID }}" > apps/web/.env.test
          echo "VITE_FIREBASE_API_KEY=${{ secrets.VITE_FIREBASE_API_KEY_TEST }}" >> apps/web/.env.test
          echo "VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.VITE_FIREBASE_AUTH_DOMAIN_TEST }}" >> apps/web/.env.test

      - name: Build frontend for E2E
        working-directory: apps/web
        run: npm run build

      - name: Start Firebase emulators
        run: |
          firebase emulators:start --project=${{ env.FIREBASE_PROJECT_ID }} &
          sleep 30
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Start frontend dev server
        working-directory: apps/web
        run: |
          npm run preview &
          sleep 10

      - name: Run E2E tests
        run: npx playwright test
        env:
          BASE_URL: http://localhost:4173
          FIREBASE_AUTH_EMULATOR_HOST: localhost:9099
          FIRESTORE_EMULATOR_HOST: localhost:8080

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload E2E screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots
          path: test-results/
          retention-days: 7

  # ==================== PERFORMANCE TESTS ====================
  performance-tests:
    name: 'Performance Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: apps/web
        run: npm ci

      - name: Build for production
        working-directory: apps/web
        run: npm run build

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run bundle analyzer
        working-directory: apps/web
        run: |
          npx vite-bundle-analyzer --mode production --analyzerMode json --reportFilename bundle-report.json
          echo "## 📦 Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Bundle analysis completed. Check artifacts for detailed report." >> $GITHUB_STEP_SUMMARY

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: apps/web/bundle-report.json

  # ==================== SECURITY TESTS ====================
  security-tests:
    name: 'Security Tests'
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit (Frontend)
        working-directory: apps/web
        run: |
          npm audit --audit-level high --production
          npm audit --audit-level high --production --json > npm-audit-frontend.json
        continue-on-error: true

      - name: Run npm audit (Backend)
        working-directory: functions
        run: |
          npm audit --audit-level high --production
          npm audit --audit-level high --production --json > npm-audit-backend.json
        continue-on-error: true

      - name: Upload security audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: |
            apps/web/npm-audit-frontend.json
            functions/npm-audit-backend.json

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  # ==================== DEPLOYMENT TESTS ====================
  deployment-test-staging:
    name: 'Deploy to Staging & Test'
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [unit-tests-frontend, unit-tests-backend, integration-tests, e2e-tests]
    if: github.ref == 'refs/heads/develop'

    environment:
      name: staging
      url: https://${{ env.FIREBASE_PROJECT_ID_STAGING }}.web.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install and build frontend
        working-directory: apps/web
        run: |
          npm ci
          npm run build
        env:
          VITE_FIREBASE_PROJECT_ID: ${{ env.FIREBASE_PROJECT_ID_STAGING }}
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY_STAGING }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN_STAGING }}

      - name: Install and build backend
        working-directory: functions
        run: |
          npm ci
          npm run build

      - name: Deploy to Firebase Staging
        run: |
          npm install -g firebase-tools
          firebase deploy --project=${{ env.FIREBASE_PROJECT_ID_STAGING }}
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

      - name: Run smoke tests against staging
        run: |
          npx playwright test --grep "@smoke"
        env:
          BASE_URL: https://${{ env.FIREBASE_PROJECT_ID_STAGING }}.web.app

      - name: Run API health checks
        run: |
          curl -f https://${{ env.FIREBASE_PROJECT_ID_STAGING }}.web.app/api/health
          curl -f https://${{ env.FIREBASE_PROJECT_ID_STAGING }}.cloudfunctions.net/api/health

  # ==================== COVERAGE ANALYSIS ====================
  coverage-report:
    name: 'Coverage Analysis'
    runs-on: ubuntu-latest
    needs: [unit-tests-frontend, unit-tests-backend]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download coverage reports
        uses: actions/download-artifact@v4
        with:
          path: coverage-reports/

      - name: Generate combined coverage report
        run: |
          echo "## 📊 Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ✅ Completed" >> $GITHUB_STEP_SUMMARY

  # ==================== QUALITY GATES ====================
  quality-gate:
    name: 'Quality Gate'
    runs-on: ubuntu-latest
    needs: [unit-tests-frontend, unit-tests-backend, integration-tests, e2e-tests, security-tests]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Checking quality gate requirements..."

          # Check if all required tests passed
          FRONTEND_TESTS="${{ needs.unit-tests-frontend.result }}"
          BACKEND_TESTS="${{ needs.unit-tests-backend.result }}"
          INTEGRATION_TESTS="${{ needs.integration-tests.result }}"
          E2E_TESTS="${{ needs.e2e-tests.result }}"
          SECURITY_TESTS="${{ needs.security-tests.result }}"

          echo "Frontend Tests: $FRONTEND_TESTS"
          echo "Backend Tests: $BACKEND_TESTS"
          echo "Integration Tests: $INTEGRATION_TESTS"
          echo "E2E Tests: $E2E_TESTS"
          echo "Security Tests: $SECURITY_TESTS"

          if [[ "$FRONTEND_TESTS" != "success" ]] || \
             [[ "$BACKEND_TESTS" != "success" ]] || \
             [[ "$INTEGRATION_TESTS" != "success" ]] || \
             [[ "$E2E_TESTS" != "success" ]] || \
             [[ "$SECURITY_TESTS" != "success" ]]; then
            echo "❌ Quality gate failed - One or more test suites failed"
            exit 1
          fi

          echo "✅ Quality gate passed - All tests successful"

      - name: Generate quality report
        run: |
          echo "## 🎯 Quality Gate Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Unit Tests | ${{ needs.unit-tests-frontend.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Unit Tests | ${{ needs.unit-tests-backend.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Tests | ${{ needs.security-tests.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY

  # ==================== CLEANUP ====================
  cleanup:
    name: 'Cleanup'
    runs-on: ubuntu-latest
    needs: [quality-gate, deployment-test-staging]
    if: always()

    steps:
      - name: Clean up test artifacts
        run: |
          echo "Cleaning up test artifacts and temporary resources..."
          # Add any cleanup commands here if needed
          echo "✅ Cleanup completed"