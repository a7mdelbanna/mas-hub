version: '3.8'

services:
  # Firebase Emulator Suite
  firebase:
    image: firebase/firebase-tools:latest
    ports:
      - "4000:4000"   # Firebase Emulator UI
      - "9099:9099"   # Auth Emulator
      - "8080:8080"   # Firestore Emulator
      - "9199:9199"   # Storage Emulator
      - "5001:5001"   # Functions Emulator
      - "8085:8085"   # Pub/Sub Emulator
      - "9000:9000"   # Realtime Database Emulator (if needed)
    volumes:
      - .:/workspace
      - firebase_data:/opt/firebase
    working_dir: /workspace
    command: >
      sh -c "
        firebase use demo-project &&
        firebase emulators:start --import=./firebase-seed-data --export-on-exit=./firebase-seed-data
      "
    environment:
      - FIRESTORE_EMULATOR_HOST=0.0.0.0:8080
      - FIREBASE_AUTH_EMULATOR_HOST=0.0.0.0:9099
      - FIREBASE_STORAGE_EMULATOR_HOST=0.0.0.0:9199
      - FIREBASE_DATABASE_EMULATOR_HOST=0.0.0.0:9000
      - GCLOUD_PROJECT=demo-project
    networks:
      - mas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development React App
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/build
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - REACT_APP_FIREBASE_PROJECT_ID=demo-project
      - REACT_APP_FIREBASE_AUTH_DOMAIN=demo-project.firebaseapp.com
      - REACT_APP_FIREBASE_API_KEY=demo-api-key
      - REACT_APP_FIREBASE_STORAGE_BUCKET=demo-project.appspot.com
      - REACT_APP_FIREBASE_MESSAGING_SENDER_ID=123456789
      - REACT_APP_FIREBASE_APP_ID=1:123456789:web:abcdef
      - REACT_APP_ENVIRONMENT=development
      - REACT_APP_USE_EMULATORS=true
      - REACT_APP_STRIPE_PUBLIC_KEY=pk_test_example
      - REACT_APP_PAYMOB_PUBLIC_KEY=test_paymob_key
    depends_on:
      firebase:
        condition: service_healthy
    networks:
      - mas-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - mas-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for external integrations testing
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mas_hub_dev
      - POSTGRES_USER=mas_user
      - POSTGRES_PASSWORD=mas_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - mas-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mas_user -d mas_hub_dev"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"   # SMTP
      - "8025:8025"   # Web UI
    networks:
      - mas-network

  # Nginx reverse proxy for local development
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
      - firebase
    networks:
      - mas-network

  # Test runner service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=test
      - CI=true
      - FIREBASE_AUTH_EMULATOR_HOST=firebase:9099
      - FIRESTORE_EMULATOR_HOST=firebase:8080
      - FIREBASE_STORAGE_EMULATOR_HOST=firebase:9199
    depends_on:
      firebase:
        condition: service_healthy
    networks:
      - mas-network
    profiles:
      - testing

  # Cypress E2E testing
  cypress:
    image: cypress/included:latest
    depends_on:
      app:
        condition: service_healthy
      firebase:
        condition: service_healthy
    environment:
      - CYPRESS_baseUrl=http://app:3000
      - CYPRESS_TEST_USER_EMAIL=test@mashub.dev
      - CYPRESS_TEST_USER_PASSWORD=testpassword123
    volumes:
      - ./cypress:/cypress
      - ./cypress/videos:/cypress/videos
      - ./cypress/screenshots:/cypress/screenshots
    working_dir: /cypress
    networks:
      - mas-network
    profiles:
      - e2e

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mas-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - mas-network
    profiles:
      - monitoring

  # Log aggregation with ELK stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - mas-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    ports:
      - "5000:5000"
      - "9600:9600"
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config:/usr/share/logstash/config
    depends_on:
      - elasticsearch
    networks:
      - mas-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - mas-network
    profiles:
      - logging

  # Backup service for Firebase emulator data
  backup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.backup
    volumes:
      - ./firebase-seed-data:/backup-source
      - ./backups:/backup-destination
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
    networks:
      - mas-network
    profiles:
      - backup

networks:
  mas-network:
    driver: bridge

volumes:
  firebase_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local