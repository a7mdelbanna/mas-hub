performance_metrics:
  # SLA Targets
  sla_targets:
    availability:
      target: 99.9
      measurement_window: "30d"
      downtime_budget: "43m 28s"

    response_time:
      p50: 200  # milliseconds
      p95: 500  # milliseconds
      p99: 1000 # milliseconds
      measurement_window: "5m"

    error_rate:
      target: 0.1  # percentage
      measurement_window: "5m"

    throughput:
      minimum_rps: 100  # requests per second
      maximum_rps: 1000 # requests per second

  # Key Performance Indicators
  kpis:
    business_metrics:
      - name: daily_active_users
        query: "mas_hub_daily_active_users"
        target: 500
        trend: "increasing"
        alert_threshold: 10  # percentage drop

      - name: user_registration_conversion
        query: "(increase(user_registrations_total[24h]) / increase(user_visits_total[24h])) * 100"
        target: 5  # percentage
        trend: "increasing"
        alert_threshold: 20  # percentage drop

      - name: project_creation_rate
        query: "rate(projects_created_total[1h])"
        target: 2  # projects per hour
        trend: "stable"
        alert_threshold: 50  # percentage drop

      - name: payment_success_rate
        query: "(sum(rate(successful_payments_total[5m])) / sum(rate(payment_attempts_total[5m]))) * 100"
        target: 95  # percentage
        trend: "stable"
        alert_threshold: 5  # percentage drop

      - name: client_portal_engagement
        query: "rate(client_portal_logins_total[1h])"
        target: 10  # logins per hour
        trend: "increasing"
        alert_threshold: 30  # percentage drop

    technical_metrics:
      - name: api_response_time_p95
        query: "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))"
        target: 0.5  # seconds
        trend: "decreasing"
        alert_threshold: 100  # percentage increase

      - name: database_query_time_p95
        query: "histogram_quantile(0.95, sum(rate(firestore_query_duration_seconds_bucket[5m])) by (le))"
        target: 0.1  # seconds
        trend: "decreasing"
        alert_threshold: 200  # percentage increase

      - name: function_cold_start_rate
        query: "rate(firebase_function_cold_starts_total[5m]) / rate(firebase_function_executions_total[5m])"
        target: 0.1  # 10% of executions
        trend: "decreasing"
        alert_threshold: 100  # percentage increase

      - name: memory_utilization
        query: "(process_resident_memory_bytes / process_virtual_memory_max_bytes) * 100"
        target: 70  # percentage
        trend: "stable"
        alert_threshold: 20  # percentage increase

      - name: cpu_utilization
        query: "rate(process_cpu_seconds_total[5m]) * 100"
        target: 60  # percentage
        trend: "stable"
        alert_threshold: 30  # percentage increase

  # Load Testing Scenarios
  load_testing:
    scenarios:
      - name: "normal_load"
        description: "Typical daily traffic pattern"
        duration: "10m"
        users:
          concurrent: 50
          ramp_up: "2m"
          ramp_down: "1m"
        endpoints:
          - path: "/api/health"
            method: "GET"
            weight: 5
          - path: "/api/auth/login"
            method: "POST"
            weight: 10
          - path: "/api/projects"
            method: "GET"
            weight: 20
          - path: "/api/projects"
            method: "POST"
            weight: 5
          - path: "/api/timesheets"
            method: "POST"
            weight: 15
          - path: "/api/invoices"
            method: "GET"
            weight: 10

      - name: "peak_load"
        description: "Peak usage scenarios (end of month)"
        duration: "15m"
        users:
          concurrent: 200
          ramp_up: "5m"
          ramp_down: "2m"
        endpoints:
          - path: "/api/projects"
            method: "GET"
            weight: 30
          - path: "/api/invoices"
            method: "POST"
            weight: 20
          - path: "/api/payroll/process"
            method: "POST"
            weight: 10
          - path: "/api/reports/financial"
            method: "GET"
            weight: 25

      - name: "stress_test"
        description: "Breaking point testing"
        duration: "20m"
        users:
          concurrent: 500
          ramp_up: "10m"
          ramp_down: "2m"
        endpoints:
          - path: "/api/projects"
            method: "GET"
            weight: 40
          - path: "/api/auth/login"
            method: "POST"
            weight: 20
          - path: "/api/portal/client/dashboard"
            method: "GET"
            weight: 25

      - name: "spike_test"
        description: "Sudden traffic spike simulation"
        duration: "5m"
        users:
          concurrent: 1000
          ramp_up: "30s"
          ramp_down: "30s"
        endpoints:
          - path: "/api/health"
            method: "GET"
            weight: 100

  # Performance Monitoring Rules
  monitoring_rules:
    recording_rules:
      - name: "mas_hub:http_request_rate"
        query: "sum(rate(http_requests_total[5m])) by (method, status)"
        interval: "30s"

      - name: "mas_hub:http_request_duration_p95"
        query: "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket[5m])) by (le))"
        interval: "30s"

      - name: "mas_hub:error_rate"
        query: "(sum(rate(http_requests_total{status=~\"5..\"}[5m])) / sum(rate(http_requests_total[5m]))) * 100"
        interval: "30s"

      - name: "mas_hub:business_kpis"
        query: "sum(increase(projects_created_total[1h]))"
        interval: "1m"

      - name: "mas_hub:firebase_performance"
        query: "sum(rate(firebase_function_executions_total[5m])) by (function_name)"
        interval: "30s"

  # Capacity Planning
  capacity_planning:
    projections:
      user_growth:
        current_dau: 100
        monthly_growth_rate: 15  # percentage
        projected_6_months: 200
        projected_12_months: 400

      request_volume:
        current_rps: 50
        growth_multiplier: 2  # requests per user
        projected_6_months: 400
        projected_12_months: 800

      storage_growth:
        current_gb: 10
        monthly_growth_gb: 5
        projected_6_months: 40
        projected_12_months: 70

    scaling_triggers:
      - metric: "mas_hub:http_request_rate"
        threshold: 800  # requests per second
        action: "scale_functions_up"
        cooldown: "5m"

      - metric: "mas_hub:error_rate"
        threshold: 2  # percentage
        action: "alert_and_investigate"
        cooldown: "1m"

      - metric: "firebase_function_execution_time_p95"
        threshold: 10  # seconds
        action: "optimize_functions"
        cooldown: "10m"

      - metric: "firestore_read_units_per_second"
        threshold: 1000
        action: "review_query_patterns"
        cooldown: "1h"

  # Performance Budgets
  performance_budgets:
    frontend:
      bundle_size:
        initial: 500  # KB
        lazy_chunks: 100  # KB each

      lighthouse_scores:
        performance: 90
        accessibility: 95
        best_practices: 90
        seo: 95

      core_web_vitals:
        lcp: 2.5  # seconds
        fid: 100  # milliseconds
        cls: 0.1

    backend:
      cold_start_time: 2  # seconds
      warm_response_time: 200  # milliseconds
      database_query_time: 100  # milliseconds
      memory_usage: 512  # MB per function

    third_party:
      stripe_api_response: 1  # seconds
      paymob_api_response: 2  # seconds
      email_delivery_time: 5  # seconds

  # Optimization Strategies
  optimization_strategies:
    frontend:
      - strategy: "code_splitting"
        description: "Implement route-based code splitting"
        priority: "high"
        expected_improvement: "30% bundle size reduction"

      - strategy: "image_optimization"
        description: "Implement WebP with fallback"
        priority: "medium"
        expected_improvement: "20% faster image loading"

      - strategy: "service_worker_caching"
        description: "Aggressive caching of static assets"
        priority: "high"
        expected_improvement: "50% faster repeat visits"

    backend:
      - strategy: "function_warming"
        description: "Implement keep-alive for critical functions"
        priority: "high"
        expected_improvement: "90% cold start reduction"

      - strategy: "query_optimization"
        description: "Optimize Firestore compound indexes"
        priority: "medium"
        expected_improvement: "40% faster queries"

      - strategy: "caching_layer"
        description: "Implement Redis caching for frequent reads"
        priority: "medium"
        expected_improvement: "60% read performance improvement"

    infrastructure:
      - strategy: "multi_region_deployment"
        description: "Deploy to multiple Firebase regions"
        priority: "low"
        expected_improvement: "25% latency reduction for global users"

      - strategy: "cdn_optimization"
        description: "Optimize Firebase Hosting CDN settings"
        priority: "medium"
        expected_improvement: "30% static asset delivery improvement"