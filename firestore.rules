rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function hasRole(role) {
      return isAuthenticated() &&
             request.auth.token.roles != null &&
             role in request.auth.token.roles;
    }

    function hasAnyRole(roles) {
      return isAuthenticated() &&
             request.auth.token.roles != null &&
             request.auth.token.roles.hasAny(roles);
    }

    function isAdmin() {
      return hasRole('admin') || hasRole('super_admin');
    }

    function isManager() {
      return hasRole('manager') || isAdmin();
    }

    function isEmployee() {
      return hasRole('employee') || isManager();
    }

    function isClient() {
      return hasRole('client');
    }

    function isCandidate() {
      return hasRole('candidate');
    }

    function hasPortalAccess(portal) {
      return isAuthenticated() &&
             request.auth.token.portalAccess != null &&
             request.auth.token.portalAccess[portal] == true;
    }

    function isActiveUser() {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.active == true;
    }

    function canAccessUser(userId) {
      return isOwner(userId) || isAdmin() ||
             (isManager() && isSameDepartment(userId));
    }

    function isSameDepartment(userId) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department ==
             get(/databases/$(database)/documents/users/$(userId)).data.department;
    }

    function validEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }

    function validPhoneNumber(phone) {
      return phone == null || phone.matches('^\\+?[1-9]\\d{1,14}$');
    }

    // CRITICAL: Multi-tenant isolation helpers
    function isSameOrganization(resource) {
      return isAuthenticated() &&
             request.auth.token.organizationId != null &&
             resource.data.organizationId == request.auth.token.organizationId;
    }

    function belongsToOrganization(userId, orgId) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(userId)).data.organizations[orgId] != null &&
             get(/databases/$(database)/documents/users/$(userId)).data.organizations[orgId].active == true;
    }

    function canAccessOrganizationData(orgId) {
      return isAuthenticated() &&
             request.auth.token.organizationId == orgId;
    }

    // Users Collection - CRITICAL SECURITY FIX FOR MULTI-TENANCY
    match /users/{userId} {
      // CRITICAL: Only allow reading users from same organization
      allow read: if isAuthenticated() && (
        isOwner(userId) || // Users can always read their own profile
        isAdmin() || // Admins can read all users
        // Check if both users share at least one active organization
        (resource.data.organizations != null &&
         request.auth.token.organizationId != null &&
         resource.data.organizations[request.auth.token.organizationId] != null &&
         resource.data.organizations[request.auth.token.organizationId].active == true)
      );

      allow create: if isAuthenticated() && (
        isOwner(userId) ||
        isAdmin() ||
        hasRole('manager') ||
        hasRole('hr')
      ) && validEmail(request.resource.data.email) &&
          validPhoneNumber(request.resource.data.phoneNumber);

      allow update: if isAuthenticated() && (
        (isOwner(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['roles', 'permissions', 'active'])) ||
        isAdmin() ||
        hasRole('hr') ||
        (isManager() && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['roles', 'permissions']))
      );

      allow delete: if isAdmin() || hasRole('hr');
    }

    // Branding Collection
    match /branding/{brandingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Roles Collection
    match /roles/{roleId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Departments Collection
    match /departments/{departmentId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Projects Collection - WITH ORGANIZATION ISOLATION
    match /projects/{projectId} {
      allow read: if isAuthenticated() && (
        // Must be in same organization
        resource.data.organizationId == request.auth.token.organizationId && (
          isAdmin() ||
          isManager() ||
          resource.data.members[request.auth.uid] == true ||
          resource.data.createdBy == request.auth.uid
        )
      );

      allow create: if isAuthenticated() && (
        isAdmin() ||
        isManager()
      ) && request.resource.data.keys().hasAll(['name', 'status', 'createdBy', 'organizationId']) &&
      request.resource.data.organizationId == request.auth.token.organizationId;

      allow update: if isAuthenticated() && (
        isAdmin() ||
        (isManager() && resource.data.createdBy == request.auth.uid) ||
        (resource.data.members[request.auth.uid] == true &&
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['budget', 'status', 'members']))
      );

      allow delete: if isAdmin();
    }

    // Tasks Collection - WITH ORGANIZATION ISOLATION
    match /tasks/{taskId} {
      allow read: if isAuthenticated() && (
        // Must be in same organization
        resource.data.organizationId == request.auth.token.organizationId && (
          isAdmin() ||
          resource.data.assignedTo == request.auth.uid ||
          resource.data.createdBy == request.auth.uid ||
          (exists(/databases/$(database)/documents/projects/$(resource.data.projectId)) &&
           get(/databases/$(database)/documents/projects/$(resource.data.projectId)).data.members[request.auth.uid] == true)
        )
      );

      allow create: if isAuthenticated() && (
        request.resource.data.organizationId == request.auth.token.organizationId && (
          isAdmin() ||
          isManager() ||
          (exists(/databases/$(database)/documents/projects/$(request.resource.data.projectId)) &&
           get(/databases/$(database)/documents/projects/$(request.resource.data.projectId)).data.members[request.auth.uid] == true)
        )
      );

      allow update: if isAuthenticated() && (
        isAdmin() ||
        resource.data.assignedTo == request.auth.uid ||
        resource.data.createdBy == request.auth.uid
      );

      allow delete: if isAdmin() || resource.data.createdBy == request.auth.uid;
    }

    // Invoices Collection - WITH ORGANIZATION ISOLATION
    match /invoices/{invoiceId} {
      allow read: if isAuthenticated() && (
        // Must be in same organization
        resource.data.organizationId == request.auth.token.organizationId && (
          isAdmin() ||
          (isEmployee() && hasPortalAccess('employee')) ||
          (isClient() && resource.data.clientId == request.auth.uid)
        )
      );

      allow create: if isAuthenticated() && (
        isAdmin() ||
        (isEmployee() && hasPortalAccess('employee'))
      );

      allow update: if isAuthenticated() && (
        isAdmin() ||
        (isEmployee() && hasPortalAccess('employee') &&
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['total', 'paid']))
      );

      allow delete: if isAdmin();
    }

    // Payments Collection
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isEmployee() && hasPortalAccess('employee')) ||
        (isClient() && resource.data.clientId == request.auth.uid)
      );

      allow create: if isAuthenticated() && (
        isAdmin() ||
        (isEmployee() && hasPortalAccess('employee'))
      );

      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Tickets Collection
    match /tickets/{ticketId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isEmployee() && hasPortalAccess('employee')) ||
        resource.data.createdBy == request.auth.uid ||
        resource.data.assignedTo == request.auth.uid
      );

      allow create: if isAuthenticated();

      allow update: if isAuthenticated() && (
        isAdmin() ||
        resource.data.assignedTo == request.auth.uid ||
        (resource.data.createdBy == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'priority']))
      );

      allow delete: if isAdmin();
    }

    // Courses Collection (LMS)
    match /courses/{courseId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        resource.data.published == true ||
        resource.data.instructors[request.auth.uid] == true ||
        resource.data.students[request.auth.uid] == true
      );

      allow create: if isAuthenticated() && (
        isAdmin() ||
        (isEmployee() && hasPortalAccess('employee'))
      );

      allow update: if isAuthenticated() && (
        isAdmin() ||
        resource.data.instructors[request.auth.uid] == true
      );

      allow delete: if isAdmin();
    }

    // Course Enrollments
    match /enrollments/{enrollmentId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        resource.data.studentId == request.auth.uid ||
        exists(/databases/$(database)/documents/courses/$(resource.data.courseId)) &&
        get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.instructors[request.auth.uid] == true
      );

      allow create: if isAuthenticated() && (
        isAdmin() ||
        request.resource.data.studentId == request.auth.uid
      );

      allow update: if isAuthenticated() && (
        isAdmin() ||
        (exists(/databases/$(database)/documents/courses/$(resource.data.courseId)) &&
         get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.instructors[request.auth.uid] == true)
      );

      allow delete: if isAdmin();
    }

    // Assets Collection
    match /assets/{assetId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        (isEmployee() && hasPortalAccess('employee'))
      );

      allow create: if isAuthenticated() && (
        isAdmin() ||
        (isManager() && hasPortalAccess('employee'))
      );

      allow update: if isAuthenticated() && (
        isAdmin() ||
        (isManager() && hasPortalAccess('employee'))
      );

      allow delete: if isAdmin();
    }

    // Organizations Collection (Multi-tenant)
    match /organizations/{orgId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        resource.data.members[request.auth.uid] != null ||
        // Allow reading if user is in the organization's users
        exists(/databases/$(database)/documents/users/$(request.auth.uid))
      );

      allow create: if isAuthenticated(); // Any authenticated user can create an organization

      allow update: if isAuthenticated() && (
        isAdmin() ||
        resource.data.owners[request.auth.uid] == true
      );

      allow delete: if false; // Never allow deletion
    }

    // Activity Logs Collection
    match /activityLogs/{logId} {
      allow read: if isAuthenticated() && (
        isAdmin() ||
        resource.data.userId == request.auth.uid
      );

      allow create: if isAuthenticated();
      allow update: if false; // Logs should never be updated
      allow delete: if false; // Logs should never be deleted
    }

    // Notifications Collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        resource.data.recipientId == request.auth.uid ||
        isAdmin()
      );

      allow create: if isAuthenticated() && (
        isAdmin() ||
        (isEmployee() && hasPortalAccess('employee'))
      );

      allow update: if isAuthenticated() && (
        resource.data.recipientId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt'])
      );

      allow delete: if isAuthenticated() && (
        resource.data.recipientId == request.auth.uid ||
        isAdmin()
      );
    }

    // Settings Collection
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // File Uploads Collection
    match /uploads/{uploadId} {
      allow read: if isAuthenticated() && (
        resource.data.uploadedBy == request.auth.uid ||
        resource.data.public == true ||
        isAdmin()
      );

      allow create: if isAuthenticated() &&
        request.resource.data.uploadedBy == request.auth.uid;

      allow update: if isAuthenticated() && (
        resource.data.uploadedBy == request.auth.uid ||
        isAdmin()
      );

      allow delete: if isAuthenticated() && (
        resource.data.uploadedBy == request.auth.uid ||
        isAdmin()
      );
    }

    // UsersByOrganization subcollection for multi-tenancy
    match /organizations/{orgId}/users/{userId} {
      allow read: if isAuthenticated() && (
        isOwner(userId) ||
        isAdmin() ||
        request.auth.token.organizationId == orgId
      );

      allow write: if isAuthenticated() && (
        isAdmin() ||
        (request.auth.token.organizationId == orgId && hasRole('hr'))
      );
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}